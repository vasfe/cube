{"version":3,"sources":["components/Cube.js","components/TouchableAnimation.js","App.js","reportWebVitals.js","index.js"],"names":["Body","styled","div","props","size","keyframes","Face","rotateY","translateZ","translateY","rotateX","Cube","className","color","Container","Touchable","Pointer","position","RotatingAnimation","newRotation","currentRotation","TouchableAnimation","useState","pointerPosition","setPointerPosition","setCurrentRotation","setNewRotation","useEffect","rotationAppliedX","rotationAppliedY","console","log","Math","round","setTimeout","animationDuration","onClick","event","e","nativeEvent","offsetX","offsetY","children","Scene","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4a64569e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { keyframes } from 'styled-components'\r\n\r\nconst float = () => keyframes`\r\n    to {\r\n        transform: rotate(360deg) rotateY(360deg) rotateX(360deg);\r\n    }\r\n`\r\nconst Body = styled.div`\r\n    width: ${props => props.size}px;\r\n    height:  ${props => props.size}px;\r\n    position: relative;\r\n    transform-style: preserve-3d;\r\n    animation: ${float} 30s infinite linear;\r\n`;\r\n\r\nconst Face = styled.div`\r\n    position: absolute;\r\n    background-color: rgba(9, 255, 0, 0.287);\r\n    width: 100%;\r\n    height: 100%;\r\n    box-shadow: 0 0 30px rgba(22, 185, 16, 0.623) inset;\r\n    transform: \r\n        rotateY(${props => props.rotateY})\r\n        translateZ(${props => props.translateZ}) \r\n        translateY(${props => props.translateY}) \r\n        rotateX(${props => props.rotateX});\r\n`;\r\n\r\nconst Cube = props => {\r\n\r\n    return (\r\n        <Body\r\n            className=\"App\" color=\"black\" size={props.size}\r\n        >\r\n            <Face\r\n                // front\r\n                rotateY=\"0\"\r\n                rotateX=\"0\"\r\n                translateZ={`${props.size / 2}px`}\r\n                translateY=\"0\"\r\n            />\r\n            <Face\r\n                // back\r\n                rotateY=\"180deg\"\r\n                rotateX=\"0\"\r\n                translateZ={`${props.size / 2}px`}\r\n                translateY=\"0\"\r\n            />\r\n            <Face\r\n                // bottom\r\n                rotateY=\"0\"\r\n                rotateX=\"90deg\"\r\n                translateY={`${props.size / 2}px`}\r\n                translateZ=\"0\"\r\n            />\r\n            <Face\r\n                // top\r\n                rotateY=\"0\"\r\n                rotateX=\"90deg\"\r\n                translateY={`-${props.size / 2}px`}\r\n                translateZ=\"0\"\r\n            />\r\n            <Face\r\n                // right\r\n                rotateY=\"90deg\"\r\n                rotateX=\"0\"\r\n                translateY=\"0\"\r\n                translateZ={`${props.size / 2}px`}\r\n            />\r\n            <Face\r\n                // right\r\n                rotateY=\"270deg\"\r\n                rotateX=\"0\"\r\n                translateY=\"0\"\r\n                translateZ={`${props.size / 2}px`}\r\n            />\r\n        </Body>\r\n    );\r\n}\r\n\r\nexport default Cube;","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport { keyframes } from 'styled-components'\r\n\r\nconst maxRotation = 360;\r\nconst animationDuration = 2;\r\n\r\nconst spin = (newRotation) => keyframes`\r\n    100% {\r\n        transform: rotateY(${newRotation[0]}deg) rotateX(${newRotation[1]}deg) \r\n    };\r\n`\r\nconst pointerAnimation = (position) => keyframes`\r\n    0%{\r\n        border-width: 7px\r\n    }\r\n    100% {\r\n        width: calc(var(--size)*20);\r\n        height: calc(var(--size)*20);\r\n        left: calc(${position[0]}px - var(--size)/2*20);\r\n        top:  calc(${position[1]}px - var(--size)/2*20);\r\n        border-width: 2px\r\n    };\r\n`\r\n\r\nconst Container = styled.div`\r\n    width: ${props => props.size}px;\r\n    height:  ${props => props.size}px;\r\n    position: relative;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-sizing: border-box;\r\n`;\r\n\r\nconst Touchable = styled.div`\r\n    position: absolute;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 10000;\r\n`;\r\n\r\nconst Pointer = styled.div`\r\n    --size: 2px;    \r\n    position: absolute;\r\n    width: var(--size);\r\n    height: var(--size);\r\n    left: calc(${props => props.position[0]}px - var(--size)/2);\r\n    top:  calc(${props => props.position[1]}px - var(--size)/2);\r\n    border-radius: 50%;\r\n    border-width: 0;\r\n    border-color: #2c2cca65;\r\n    border-style: solid;\r\n    animation: ${props => props.position ? pointerAnimation(props.position) : null} .5s linear;\r\n`;\r\n\r\nconst RotatingAnimation = styled.div`\r\n    width: ${props => props.size}px;\r\n    height:  ${props => props.size}px;\r\n    transform-style: preserve-3d;\r\n    animation: ${props => props.newRotation ? spin(props.newRotation) : null} ${animationDuration}s ease-out;\r\n    transform: rotateY(${props => props.currentRotation[0]}deg) rotateX(${props => props.currentRotation[1]}deg);\r\n`;\r\n\r\nconst TouchableAnimation = props => {\r\n    const [pointerPosition, setPointerPosition] = useState(null)\r\n    const [currentRotation, setCurrentRotation] = useState([0, 0])//[x,y]\r\n    const [newRotation, setNewRotation] = useState(null)//[x,y]\r\n\r\n    const handleClick = (e) => {\r\n        setPointerPosition([e.nativeEvent.offsetX, e.nativeEvent.offsetY])\r\n    }\r\n\r\n    const startAnimation = () => {\r\n        setTimeout(() => {\r\n            setCurrentRotation(newRotation)\r\n            setNewRotation(null)\r\n            setPointerPosition(null)\r\n        }, animationDuration * (1000 - 16));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (pointerPosition) {\r\n            const rotationAppliedX = (pointerPosition[0] - props.size / 2) * maxRotation / (props.size / 2)\r\n            const rotationAppliedY = (pointerPosition[1] - props.size / 2) * maxRotation / (props.size / 2)\r\n            console.log([rotationAppliedX, rotationAppliedY])\r\n            setNewRotation([currentRotation[0] - Math.round(rotationAppliedX), Math.round(currentRotation[1] + rotationAppliedY)])\r\n        }\r\n    }, [pointerPosition])\r\n\r\n    useEffect(() => {\r\n        if (newRotation) {\r\n            startAnimation()\r\n        }\r\n    }, [newRotation])\r\n\r\n    return (\r\n        <Container\r\n            size={props.size}\r\n        >\r\n            <Touchable\r\n                onClick={(event) => !newRotation ? handleClick(event) : null}\r\n            >\r\n                <Pointer\r\n                    position={pointerPosition ? pointerPosition : 0}\r\n                />\r\n            </Touchable>\r\n            <RotatingAnimation\r\n                currentRotation={currentRotation}\r\n                newRotation={newRotation}\r\n            >\r\n                {props.children}\r\n            </RotatingAnimation>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default TouchableAnimation","import React from 'react';\nimport Cube from './components/Cube';\nimport TouchableAnimation from './components/TouchableAnimation';\nimport styled from 'styled-components';\n\nconst Scene = styled.div`\n    position: relative;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background: black;\n`;\n\nconst App = () => {\n  return (\n    <Scene>\n      <TouchableAnimation size={300}>\n        <Cube size={200}/>\n      </TouchableAnimation>\n    </Scene>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}